# Generated by Django 2.2.12 on 2020-05-13 22:30

from django.db import migrations, connection
from pgcrypto import PGP_PUB_ENCRYPT_SQL
from pgcrypto.mixins import get_setting
import pgcrypto.fields

ORIGINALS = []


def set_original(apps, _):
    global ORIGINALS
    ORIGINALS = []
    EmailAddress = apps.get_model("account", "EmailAddress")
    for emailaddress in EmailAddress.objects.all():
        ORIGINALS.append(
            {
                "id": emailaddress.id,
                "email": emailaddress.email,
            }
        )


class Encrypter:
    key: str
    dataset: []

    def __init__(self, key, dataset):
        self.key = key
        self.dataset = dataset

    def get_query(self, pk, value):
        return (
            "UPDATE account_emailaddress set %s=%s"
            "WHERE account_emailaddress.id=%s"
            % (
                self.key,
                PGP_PUB_ENCRYPT_SQL.format(get_setting(connection, "PUBLIC_PGP_KEY"))
                % "'{}'".format(value),
                pk,
            )
        )

    def execute(self):
        with connection.cursor() as cursor:
            for data in self.dataset:
                cursor.execute(self.get_query(data["id"], data[self.key]))


def encrypt_exsisting_email(apps, _):
    encrypter = Encrypter("email", ORIGINALS)
    encrypter.execute()


class Decryptor:
    key: str
    dataset: []

    def __init__(self, key, dataset):
        self.key = key
        self.dataset = dataset

    def get_query(self, pk, value):
        query = (
            "UPDATE account_emailaddress SET %s=%s"
            "WHERE account_emailaddress.id=%s"
            % (self.key, "'{}'".format(value), pk)
        )
        return query

    def execute(self):
        with connection.cursor() as cursor:
            for data in self.dataset:
                cursor.execute(self.get_query(data["id"], data[self.key]))


def decrypt_email(apps, _):
    decryptor = Decryptor("email", ORIGINALS)
    decryptor.execute()


class Migration(migrations.Migration):

    dependencies = [
        ('account', '0002_email_max_length'),
        ('pgcrypto', '0001_add_pgcrypto_extension'),
    ]

    operations = [
        migrations.RunPython(set_original, decrypt_email),
        migrations.AlterField(
            model_name='emailaddress',
            name='email',
            field=pgcrypto.fields.EmailPGPPublicKeyField(max_length=254, unique=True, verbose_name='e-mail address'),
        ),
        migrations.RunPython(encrypt_exsisting_email, set_original)
    ]
